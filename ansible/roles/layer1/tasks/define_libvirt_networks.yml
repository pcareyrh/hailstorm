# define networks
# - name: start default network to ensure host IP can be determined
#   virt_net: uri=qemu:///system name=default state=active
#   ignore_errors: true
- name: reread system facts
  setup:

- name: delete networks that need to be reconfigured
  virt_net: uri=qemu:///system name={{ item.netname }} command=destroy state=absent
  when: >
    item.forward_mode|default('nat',true)!='bridge'
    or
    ((((hostvars[inventory_hostname]['ansible_' + item.bridge]|default({},true)).ipv4|default({},true)).address|default(false,true))
    and
    hostvars[inventory_hostname]['ansible_' + item.bridge].ipv4.address != item.default_gw_host_prefix | ipaddr('address'))
  with_items: "{{ infrastructure_networks }}"
# - name: start firewalld to ensure the define networks command will not fail
#   service: name=firewalld state=started
# - debug: msg={{ lookup("template", "libvirt_network.xml.j2") }}
#   with_items: "{{ infrastructure_networks }}"

- name: define networks
  virt_net: uri=qemu:///system name={{ item.netname }} command=define state=present xml='{{ lookup("template", "libvirt_network.xml.j2") }}'
  with_items: "{{ infrastructure_networks }}"
- name: start networks
  virt_net: uri=qemu:///system name={{ item.netname }} state=active
  with_items: "{{ infrastructure_networks }}"
- name: set autostart networks
  virt_net: uri=qemu:///system name={{ item.netname }} autostart=yes
  with_items: "{{ infrastructure_networks }}"
