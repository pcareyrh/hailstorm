# prepare host
- name: ensure that root has an ssh key set
  user: name=root generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa
- name: get root pubkey
  command: cat .ssh/id_rsa.pub
  register: root_pub_key
  failed_when: root_pub_key.stdout == ''
  changed_when: false
- name: set root ssh key as authorized key
  authorized_key: user=root key={{ root_pub_key.stdout }}
- name: copy ssh pubkey to layer1
  authorized_key: user=root key={{ ssh_pub_key_hailstorm }}
- name: ensure KVM nested virtualization is enabled
  copy: src=../templates/kvm-intel.conf dest=/etc/modprobe.d/kvm-intel.conf mode=0644
  register: nested_virt

# TODO: ensure proper subscription & configure channels
# see layer2_rhel
# - name: install package-cleanup
#   yum: name=yum-utils state=present
# - name: remove old kernels
#   shell: package-cleanup --oldkernels --count=2
#
# - name: system-upgrade
#   yum: name=* state=latest
- name: ensure prerequisite packages are present
  yum: name=libvirt,libvirt-client,qemu-kvm,qemu-img,libvirt-python,virt-install,nfs-utils,iptables-services state=latest
  #reboot machine if necessary https://bugzilla.redhat.com/show_bug.cgi?id=950436
  register: prereqs

- name: disable & stop NetworkManager
  service: name=NetworkManager state=stopped enabled=no
- name: mask NetworkManager
  shell: systemctl status NetworkManager | grep masked || systemctl mask NetworkManager
  register: mask_nm
  changed_when: "'Created symlink' in mask_nm.stdout"

- name: disable & stop firewalld
  service: name=firewalld state=stopped enabled=no
- name: mask firewalld
  shell: systemctl status firewalld | grep masked || systemctl mask firewalld
  register: mask_firewalld
  changed_when: "'Created symlink' in mask_firewalld.stdout"
- name: enable & start iptables service
  service: name=iptables state=started enabled=yes
# - name: enable & start iptables6 service
#   service: name=iptables6 state=started enables=yes
- name: enable and start libvirtd
  service: name=libvirtd enabled=yes state=started

# https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back
- name: restart machine
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: prereqs|changed or nested_virt|changed
- name: waiting for server to come back
  local_action: wait_for host={{ ansible_host }} port=22 delay=30 timeout=1200
  become: false
  when: prereqs|changed or nested_virt|changed
