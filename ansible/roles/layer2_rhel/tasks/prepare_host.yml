# - name: subscribe RHEL
#   redhat_subscription: state=present username={{ rhsm_username }} password={{ rhsm_password }} autosubscribe=false
# - name: check subscriptions
#   shell: subscription-manager list --consumed | grep "Pool ID" || true
#   register: subscription_list
#   changed_when: False
# - name: attach to pool
#   command: 'subscription-manager attach --pool={{ poolid }}'
#   when: subscription_list.stdout is not defined or poolid != subscription_list.stdout | regex_replace('Pool ID:\\s+(\\S*).*', '\\1')

- name: get current enabled repos
  shell: >
    subscription-manager repos |
    awk 'BEGIN { print "repos:" } /^Enabled:/ { print "  - repo: \"" f "\"\n    enabled: \"" $2 "\"" } /Repo ID:/{ f=$3 }'
  register: current_repos
  changed_when: false
  when: repos is defined

#- debug: msg="{{ (current_repos.stdout|from_yaml).repos|selectattr('enabled','match','1')|map(attribute='repo')|list }}"

- name: store repo info as fact
  set_fact:
    disable_repos: "{{ (current_repos.stdout|from_yaml).repos|selectattr('enabled','match','1')|map(attribute='repo')|list|difference(repos) }}"
    enable_repos: "{{ (current_repos.stdout|from_yaml).repos|selectattr('enabled','match','0')|map(attribute='repo')|list|intersect(repos) }}"
  when: repos is defined
# - debug: var=disable_repos
# - debug: var=enable_repos

- name: enable & disable repos
  shell: >
    subscription-manager repos
    {% for repo in disable_repos %}--disable="{{ repo }}" {% endfor %}
    {% for repo in enable_repos %}--enable="{{ repo }}" {% endfor %}
  when: repos is defined and (disable_repos|length > 0 or enable_repos|length > 0)

# - name: enable repos
#   shell: 'subscription-manager repos --disable="*" {% for repo in repos %} --enable="{{repo}}" {% endfor %}'
#   when: repos is defined

- name: check if initial upgrade has happened
  stat: path=/.initial_upgrade_complete
  register: upgrade_complete

- name: upgrade packages
  yum: name=* state=latest
  # don't ignore errors anymore
  # was - OpenShift requires older  version of Docker, ensure that a failure doesn't stop the process
  #failed_when: false
  # seems like the SSH connection dies when packages are upgraded... let's try async+polling
  async: 600
  poll: 0
  when: not upgrade_complete.stat.exists
  register: upgrade_packages
- name: poll for upgrade packages complete
  async_status: jid={{ upgrade_packages.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 60
  delay: 10
  when: not upgrade_complete.stat.exists

- name: note that initial upgrade has happened
  file: path=/.initial_upgrade_complete state=touch
  when: not upgrade_complete.stat.exists

#- debug: msg={{packages.split(',')}}
- name: install all prerequisites
  yum: name="{{ packages }}" state=present
  register: prerequisites
  async: 600
  poll: 0
  when: not (packages is undefined or packages is none or packages | trim == '')
  #with_items: "{% if packages is defined %}{{packages.split(',')}}{% else %}[]{% endif %}"
- name: poll for install prereqs complete
  async_status: jid={{ prerequisites.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 60
  delay: 10
  when: not prerequisites|skipped

#- debug: msg={{packages_uninstall.split(',')}}
- name: uninstall uneccessary packages
  yum: name="{{ packages_uninstall }}" state=absent
  register: prerequisites_un
  async: 600
  poll: 0
  when: not (packages_uninstall is undefined or packages_uninstall is none or packages_uninstall | trim == '')
  #with_items: "{% if packages_uninstall is defined %}{{packages_uninstall.split(',')}}{% else %}[]{% endif %}"
- name: poll for uninstall uneccessary packages complete
  async_status: jid={{ prerequisites_un.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 60
  delay: 10
  when: not prerequisites_un|skipped

# next tasks error message is probably the same as this: https://github.com/ansible/ansible/issues/14383
- name: enable services
  service: name={{ item }} enabled=yes state=started
  with_items: "{% if enable_services is defined %}{{ enable_services }}{% endif %}"
  register: enable
  when: not (enable_services is undefined or enable_services is none or enable_services | trim == '')
- name: disable services
  service: name={{item}} enabled=no state=stopped
  with_items: "{% if disable_services is defined %}{{ disable_services }}{% endif %}"
  register: disable
  when: not (disable_services is undefined or disable_services is none or disable_services | trim == '')

- name: reboot server
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: prerequisites|changed or enable|changed or disable|changed
- name: waiting for server to come back
  wait_for: host={{ ansible_host }} port=22 delay=30 timeout=600
  delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"
  # https://github.com/ansible/ansible/issues/11705
  when: prerequisites|changed or enable|changed or disable|changed
