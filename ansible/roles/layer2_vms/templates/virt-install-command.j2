virt-install  --name {{ inventory_hostname_short }}
            {%if uuid is defined %} --uuid uuid={{ uuid }}{% endif %}
              --ram {{ mem }}
              --vcpus {{ vcpu }}
              --os-type {{ os_type }}
              --os-variant {{ os_variant }}
            {% for nic in vm_nics %}
            {#{% if nic.netname != "guests" %}  --network network={{ nic.netname }},mac={{ nic.mac }},model=virtio {% else %} --network bridge=br0{% endif %}#}
              --network network={{ nic.netname }},mac={{ nic.mac }},model=virtio
            {% endfor %}
              --hvm
              --virt-type kvm
            {#  --cpu SandyBridge,+vmx #}{# since everything will be running on a single host, it'll be safe to expose the host CPU config #}
            {#  --cpu host,+vmx #}{# cannot handle large VMs and is slower #}
              --cpu host-passthrough,+vmx
              --disk size={{ disk.size }},path={{ layer1_qcow_storage.path }}/{{ disk.path }},format={{ disk.format }},bus=virtio
            {% for disk_file in extra_disk_files|default([]) %} --disk size={{ disk_file.size }},path={{ layer1_qcow_storage.path }}/{{ disk_file.path }},format={{ disk_file.format }},bus=virtio{% endfor %}
            {% if extra_disk_device is defined %} --disk path={{ extra_disk_device }},bus=virtio{% endif %}
              --graphics {% if graphics is defined %}{{ graphics }} {% else %}none{% endif %}
            {% if skip_install is defined and skip_install == true %}
              --print-xml
            {% else %}
              --noautoconsole
              --wait 10
              --location {{ layer1_qcow_storage.path }}/{{ rhel_iso_img }}
              --extra-args='ks=nfs:{{ infrastructure_network_admin.default_gw_host_prefix | ipaddr('address') }}:{{ nfs_kickstart_folder }}/{{ inventory_hostname_short }}.cfg {% if ksdevice is defined %}ksdevice={{ ksdevice }} {% endif %}ip=dhcp console=tty0 console=ttyS0,115200n8'
            {% endif %}
