---
- hosts: all
  remote_user: root
  gather_facts: false
  tasks:
    - set_fact:
        rhsm_username: "{{ rhsm_username }}"
        rhsm_password: "{{ rhsm_password }}"
      tags:
        - always
    - debug: var=vm_nics
      tags:
        - always
    # - debug: msg={{ vm_nics }}
    #   tags:
    #     - always

  vars_prompt:
    - name: "rhsm_username"
      prompt: "what is your Red Hat Subscription Manager username?"
      default: "wrichter"
      private: no
    - name: "rhsm_password"
      prompt: "what is your Red Hat Subscription Manager password?"
      private: yes

- hosts: layer1
  remote_user: root
  gather_facts: false
  pre_tasks:
    - setup:
      tags: [ 'layer1', 'rhosp', 'rhev', 'ose3', 'dnat' ]
  roles:
    - role: layer1
      tags: [ 'layer1' ]
      mode: create
    - role: layer1_dnat
      tags: [ 'layer1', 'dnat' ]
      mode: create
    - role: layer1_ceph_inventory
      tags: [ 'layer2', 'ceph', 'ipa' ]
      when: current_lifecycle_env.osp_storage_backend == "ceph_ownvms"

#### SATELLITE ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'satellite', 'vm', 'satellite-vm' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2','satellite', 'rhel','satellite-rhel' ], mode: create }
    - { role: layer2_satellite, tags: [ 'layer2','satellite' ], mode: create }

# - hosts: test-rhel
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'satellite', 'vm', 'test-rhel' ], mode: create }
#     - { role: layer2_rhel, tags: [ 'layer2', 'satellite', 'rhel', 'test-rhel' ], mode: create }

#### IPA ####

- hosts: ipa
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ipa', 'vm', 'ipa-vm' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: create }
    - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: create }
    - { role: layer2_ipa_etc_hosts, tags: [ 'layer2', 'ipa', 'rhel', 'ipa-rhel' ], mode: destroy }
    - { role: layer2_ipa, tags: [ 'layer2', 'ipa' ], mode: create }
    - { role: layer2_tdagent, tags: [ 'layer2', 'ipa', 'tdagent', 'ipa-tdagent'], mode: create }
    #- { role: layer2_ipa_openssl_ca, tags: [ 'layer2', 'ipa', 'ca' ], mode: create }

#### SATELLITE (again) ####

- hosts: satellite
  remote_user: root
  gather_facts: false
  #pre_tasks:
  #  - setup:
  #    tags: [ 'layer2','satellite' ]
  roles:
   - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'satellite', 'dns', 'satellite-dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
   - { role: layer2_tdagent, tags: [ 'layer2', 'satellite', 'tdagent', 'satellite-tdagent' ], mode: create }
#   - { role: layer2_ipa_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }
#   - { role: layer2_satellite_certificate, tags: ['layer2', 'satellite', 'satellite_cert'], mode: create }

# - hosts: ipa
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_rhel, tags: [ 'layer2', 'ipa', 'satellite_cert' ], mode: refreshcert }

# - hosts: test-rhel
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'test-rhel', 'vm' ], mode: create }
#    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'satellite', 'test-rhel', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#    - { role: layer2_tdagent, tags: [ 'layer2', 'satellite', 'test-rhel', 'tdagent' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }


#### Infrastructure (DNS, SMTP/IMAP) ####

- hosts: infrastructure
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'infrastructure', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'infrastructure', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'infrastructure', 'rhel' ], mode: create }
    - { role: layer2_infrastructure, tags: [ 'layer2', 'infrastructure' ], mode: create }
    - { role: layer2_tdagent, tags: [ 'layer2', 'tdagent', 'infrastructure'], mode: create }


#### VIRT-WHO host (either infrastrcture or satellite)

- hosts: virt-who
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_virtwho, tags: [ 'layer2', 'virtwho' ], mode: create }


#### CEPH

- hosts: ceph
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_vms, tags: [ 'layer2', 'ceph', 'vm' ], mode: create }
    - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'ceph', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
    - { role: layer2_rhel, tags: [ 'layer2', 'ceph', 'rhel' ], mode: create }
    - { role: layerX_distribute_pubkey, tags: [ 'layer2', 'ceph', 'ceph-installprep' ], mode: create, pubkeyhost: ceph0 }

- hosts: ceph-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-installer' ], mode: create }

- hosts: ceph-calamari
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_calamari, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-calamari' ], mode: create }

- hosts: ceph-rgws-installer
  remote_user: root
  gather_facts: false
  roles:
    - { role: layer2_ceph_rgw_installer, tags: [ 'layer2', 'ceph', 'ceph-install', 'ceph-rgws' ], mode: create }

# - hosts: storage-console
#   remote_user: root
#   gather_facts: false
#   roles:
#     - { role: layer2_vms, tags: [ 'layer2', 'storage-console', 'vm' ], mode: create }
#     - { role: layer2_rhel_reconfigure_dns, tags: [ 'layer2', 'storage-console', 'dns' ], mode: create, nameserver: "{{ hostvars['ipa'].vm_nics[0].ip }}" }
#     - { role: layer2_rhel, tags: [ 'layer2', 'storage-console', 'rhel' ], mode: create }
#     - { role: layer2_ipa_certificate, tags: ['layer2', 'storage-console', 'cert' ], mode: create }
#     - { role: layer2_storageconsole, tags: [ 'layer2', 'storage-console', 'storage-console-install' ], mode: create }
